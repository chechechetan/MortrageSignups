{"ast":null,"code":"// import { authHeader } from '../helpers';\nexport const userService = {\n  login,\n  logout,\n  register\n};\n\nfunction login(email, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  };\n  return fetch(\"http://localhost:8081/users/login\", requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  });\n} // remove user from local storage to log user out\n\n\nfunction logout() {\n  localStorage.removeItem('user');\n} // register user request\n\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(\"http://localhost:8081/auth/register\", requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/chetanan/Downloads/react-redux-user-registration-login-app/src/services/user.service.js"],"names":["userService","login","logout","register","email","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","localStorage","setItem","removeItem","response","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"AAAA;AAEA,OAAO,MAAMA,WAAW,GAAG;AAC1BC,EAAAA,KAD0B;AAE1BC,EAAAA,MAF0B;AAG1BC,EAAAA;AAH0B,CAApB;;AAMP,SAASF,KAAT,CAAeG,KAAf,EAAsBC,QAAtB,EAAgC;AAC/B,QAAMC,cAAc,GAAG;AACtBC,IAAAA,MAAM,EAAE,MADc;AAEtBC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR,KAFa;AAKtBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACpBP,MAAAA,KADoB;AAEpBC,MAAAA;AAFoB,KAAf;AALgB,GAAvB;AAWA,SAAOO,KAAK,sCAAsCN,cAAtC,CAAL,CACLO,IADK,CACAC,cADA,EAELD,IAFK,CAEAE,IAAI,IAAI;AACb;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BP,IAAI,CAACC,SAAL,CAAeI,IAAf,CAA7B;AACA,WAAOA,IAAP;AACA,GANK,CAAP;AAOA,C,CAED;;;AACA,SAASb,MAAT,GAAkB;AACjBc,EAAAA,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACA,C,CAED;;;AACA,SAASf,QAAT,CAAkBY,IAAlB,EAAwB;AACpB,QAAMT,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeI,IAAf;AAHa,GAAvB;AAKA,SAAOH,KAAK,wCAAwCN,cAAxC,CAAL,CAA6DO,IAA7D,CAAkEC,cAAlE,CAAP;AACH;;AAGD,SAASA,cAAT,CAAwBK,QAAxB,EAAkC;AACjC,SAAOA,QAAQ,CAACC,IAAT,GAAgBP,IAAhB,CAAqBO,IAAI,IAAI;AACnC,UAAMC,IAAI,GAAGD,IAAI,IAAIV,IAAI,CAACY,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACjB,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AAC5B;AACAtB,QAAAA,MAAM,GAFsB,CAG5B;AACA;;AACD,YAAMuB,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACK,OAAd,IAA0BP,QAAQ,CAACQ,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACA;;AAED,WAAOJ,IAAP;AACA,GAbM,CAAP;AAcA","sourcesContent":["// import { authHeader } from '../helpers';\n\nexport const userService = {\n\tlogin,\n\tlogout,\n\tregister\n};\n\nfunction login(email, password) {\n\tconst requestOptions = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\temail,\n\t\t\tpassword\n\t\t})\n\t};\n\n\treturn fetch(`http://localhost:8081/users/login`, requestOptions)\n\t\t.then(handleResponse)\n\t\t.then(user => {\n\t\t\t// store user details and jwt token in local storage to keep user logged in between page refreshes\n\t\t\tlocalStorage.setItem('user', JSON.stringify(user));\n\t\t\treturn user;\n\t\t});\n}\n\n// remove user from local storage to log user out\nfunction logout() {\n\tlocalStorage.removeItem('user');\n}\n\n// register user request\nfunction register(user) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(user)\n    };\n    return fetch(`http://localhost:8081/auth/register`, requestOptions).then(handleResponse);\n}\n\n\nfunction handleResponse(response) {\n\treturn response.text().then(text => {\n\t\tconst data = text && JSON.parse(text);\n\t\tif (!response.ok) {\n\t\t\tif (response.status === 401) {\n\t\t\t\t// auto logout if 401 response returned from api\n\t\t\t\tlogout();\n\t\t\t\t// location.reload(true);\n\t\t\t}\n\t\t\tconst error = (data && data.message) || response.statusText;\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\treturn data;\n\t});\n}"]},"metadata":{},"sourceType":"module"}